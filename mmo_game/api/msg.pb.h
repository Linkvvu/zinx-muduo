// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_msg_2eproto;
namespace mmo {
namespace pb {
class BroadCast;
struct BroadCastDefaultTypeInternal;
extern BroadCastDefaultTypeInternal _BroadCast_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SyncPid;
struct SyncPidDefaultTypeInternal;
extern SyncPidDefaultTypeInternal _SyncPid_default_instance_;
class SyncPlayers;
struct SyncPlayersDefaultTypeInternal;
extern SyncPlayersDefaultTypeInternal _SyncPlayers_default_instance_;
}  // namespace pb
}  // namespace mmo
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mmo {
namespace pb {

// ===================================================================


// -------------------------------------------------------------------

class SyncPid final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mmo.pb.SyncPid) */ {
 public:
  inline SyncPid() : SyncPid(nullptr) {}
  ~SyncPid() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncPid(
      ::google::protobuf::internal::ConstantInitialized);

  inline SyncPid(const SyncPid& from) : SyncPid(nullptr, from) {}
  inline SyncPid(SyncPid&& from) noexcept
      : SyncPid(nullptr, std::move(from)) {}
  inline SyncPid& operator=(const SyncPid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPid& operator=(SyncPid&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPid* internal_default_instance() {
    return reinterpret_cast<const SyncPid*>(
        &_SyncPid_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SyncPid& a, SyncPid& b) { a.Swap(&b); }
  inline void Swap(SyncPid* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPid* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SyncPid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncPid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncPid& from) { SyncPid::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SyncPid* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mmo.pb.SyncPid"; }

 protected:
  explicit SyncPid(::google::protobuf::Arena* arena);
  SyncPid(::google::protobuf::Arena* arena, const SyncPid& from);
  SyncPid(::google::protobuf::Arena* arena, SyncPid&& from) noexcept
      : SyncPid(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPidFieldNumber = 1,
  };
  // int32 Pid = 1;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mmo.pb.SyncPid)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t pid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Position final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mmo.pb.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Position(
      ::google::protobuf::internal::ConstantInitialized);

  inline Position(const Position& from) : Position(nullptr, from) {}
  inline Position(Position&& from) noexcept
      : Position(nullptr, std::move(from)) {}
  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
        &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Position& a, Position& b) { a.Swap(&b); }
  inline void Swap(Position* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Position& from) { Position::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Position* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mmo.pb.Position"; }

 protected:
  explicit Position(::google::protobuf::Arena* arena);
  Position(::google::protobuf::Arena* arena, const Position& from);
  Position(::google::protobuf::Arena* arena, Position&& from) noexcept
      : Position(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kVFieldNumber = 4,
  };
  // float X = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float Y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float Z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // float V = 4;
  void clear_v() ;
  float v() const;
  void set_v(float value);

  private:
  float _internal_v() const;
  void _internal_set_v(float value);

  public:
  // @@protoc_insertion_point(class_scope:mmo.pb.Position)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float x_;
    float y_;
    float z_;
    float v_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Player final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mmo.pb.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Player(
      ::google::protobuf::internal::ConstantInitialized);

  inline Player(const Player& from) : Player(nullptr, from) {}
  inline Player(Player&& from) noexcept
      : Player(nullptr, std::move(from)) {}
  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
        &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Player& a, Player& b) { a.Swap(&b); }
  inline void Swap(Player* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Player>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Player& from) { Player::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Player* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mmo.pb.Player"; }

 protected:
  explicit Player(::google::protobuf::Arena* arena);
  Player(::google::protobuf::Arena* arena, const Player& from);
  Player(::google::protobuf::Arena* arena, Player&& from) noexcept
      : Player(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // .mmo.pb.Position P = 2;
  bool has_p() const;
  void clear_p() ;
  const ::mmo::pb::Position& p() const;
  PROTOBUF_NODISCARD ::mmo::pb::Position* release_p();
  ::mmo::pb::Position* mutable_p();
  void set_allocated_p(::mmo::pb::Position* value);
  void unsafe_arena_set_allocated_p(::mmo::pb::Position* value);
  ::mmo::pb::Position* unsafe_arena_release_p();

  private:
  const ::mmo::pb::Position& _internal_p() const;
  ::mmo::pb::Position* _internal_mutable_p();

  public:
  // int32 Pid = 1;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mmo.pb.Player)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mmo::pb::Position* p_;
    ::int32_t pid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class BroadCast final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mmo.pb.BroadCast) */ {
 public:
  inline BroadCast() : BroadCast(nullptr) {}
  ~BroadCast() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BroadCast(
      ::google::protobuf::internal::ConstantInitialized);

  inline BroadCast(const BroadCast& from) : BroadCast(nullptr, from) {}
  inline BroadCast(BroadCast&& from) noexcept
      : BroadCast(nullptr, std::move(from)) {}
  inline BroadCast& operator=(const BroadCast& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadCast& operator=(BroadCast&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadCast& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kContent = 3,
    kP = 4,
    kActionData = 5,
    DATA_NOT_SET = 0,
  };
  static inline const BroadCast* internal_default_instance() {
    return reinterpret_cast<const BroadCast*>(
        &_BroadCast_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(BroadCast& a, BroadCast& b) { a.Swap(&b); }
  inline void Swap(BroadCast* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadCast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadCast* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BroadCast>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BroadCast& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BroadCast& from) { BroadCast::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BroadCast* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mmo.pb.BroadCast"; }

 protected:
  explicit BroadCast(::google::protobuf::Arena* arena);
  BroadCast(::google::protobuf::Arena* arena, const BroadCast& from);
  BroadCast(::google::protobuf::Arena* arena, BroadCast&& from) noexcept
      : BroadCast(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPidFieldNumber = 1,
    kTpFieldNumber = 2,
    kContentFieldNumber = 3,
    kPFieldNumber = 4,
    kActionDataFieldNumber = 5,
  };
  // int32 Pid = 1;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // int32 Tp = 2;
  void clear_tp() ;
  ::int32_t tp() const;
  void set_tp(::int32_t value);

  private:
  ::int32_t _internal_tp() const;
  void _internal_set_tp(::int32_t value);

  public:
  // string Content = 3;
  bool has_content() const;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // .mmo.pb.Position P = 4;
  bool has_p() const;
  private:
  bool _internal_has_p() const;

  public:
  void clear_p() ;
  const ::mmo::pb::Position& p() const;
  PROTOBUF_NODISCARD ::mmo::pb::Position* release_p();
  ::mmo::pb::Position* mutable_p();
  void set_allocated_p(::mmo::pb::Position* value);
  void unsafe_arena_set_allocated_p(::mmo::pb::Position* value);
  ::mmo::pb::Position* unsafe_arena_release_p();

  private:
  const ::mmo::pb::Position& _internal_p() const;
  ::mmo::pb::Position* _internal_mutable_p();

  public:
  // int32 ActionData = 5;
  bool has_actiondata() const;
  void clear_actiondata() ;
  ::int32_t actiondata() const;
  void set_actiondata(::int32_t value);

  private:
  ::int32_t _internal_actiondata() const;
  void _internal_set_actiondata(::int32_t value);

  public:
  void clear_Data();
  DataCase Data_case() const;
  // @@protoc_insertion_point(class_scope:mmo.pb.BroadCast)
 private:
  class _Internal;
  void set_has_content();
  void set_has_p();
  void set_has_actiondata();
  inline bool has_Data() const;
  inline void clear_has_Data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 5, 1,
      32, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t pid_;
    ::int32_t tp_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr content_;
      ::mmo::pb::Position* p_;
      ::int32_t actiondata_;
    } Data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayers final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mmo.pb.SyncPlayers) */ {
 public:
  inline SyncPlayers() : SyncPlayers(nullptr) {}
  ~SyncPlayers() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SyncPlayers(
      ::google::protobuf::internal::ConstantInitialized);

  inline SyncPlayers(const SyncPlayers& from) : SyncPlayers(nullptr, from) {}
  inline SyncPlayers(SyncPlayers&& from) noexcept
      : SyncPlayers(nullptr, std::move(from)) {}
  inline SyncPlayers& operator=(const SyncPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayers& operator=(SyncPlayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayers* internal_default_instance() {
    return reinterpret_cast<const SyncPlayers*>(
        &_SyncPlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SyncPlayers& a, SyncPlayers& b) { a.Swap(&b); }
  inline void Swap(SyncPlayers* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayers* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncPlayers* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SyncPlayers>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SyncPlayers& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SyncPlayers& from) { SyncPlayers::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SyncPlayers* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mmo.pb.SyncPlayers"; }

 protected:
  explicit SyncPlayers(::google::protobuf::Arena* arena);
  SyncPlayers(::google::protobuf::Arena* arena, const SyncPlayers& from);
  SyncPlayers(::google::protobuf::Arena* arena, SyncPlayers&& from) noexcept
      : SyncPlayers(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPsFieldNumber = 1,
  };
  // repeated .mmo.pb.Player ps = 1;
  int ps_size() const;
  private:
  int _internal_ps_size() const;

  public:
  void clear_ps() ;
  ::mmo::pb::Player* mutable_ps(int index);
  ::google::protobuf::RepeatedPtrField< ::mmo::pb::Player >*
      mutable_ps();
  private:
  const ::google::protobuf::RepeatedPtrField<::mmo::pb::Player>& _internal_ps() const;
  ::google::protobuf::RepeatedPtrField<::mmo::pb::Player>* _internal_mutable_ps();
  public:
  const ::mmo::pb::Player& ps(int index) const;
  ::mmo::pb::Player* add_ps();
  const ::google::protobuf::RepeatedPtrField< ::mmo::pb::Player >&
      ps() const;
  // @@protoc_insertion_point(class_scope:mmo.pb.SyncPlayers)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::mmo::pb::Player > ps_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_msg_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SyncPid

// int32 Pid = 1;
inline void SyncPid::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0;
}
inline ::int32_t SyncPid::pid() const {
  // @@protoc_insertion_point(field_get:mmo.pb.SyncPid.Pid)
  return _internal_pid();
}
inline void SyncPid::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:mmo.pb.SyncPid.Pid)
}
inline ::int32_t SyncPid::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void SyncPid::_internal_set_pid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// Position

// float X = 1;
inline void Position::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:mmo.pb.Position.X)
  return _internal_x();
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mmo.pb.Position.X)
}
inline float Position::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Position::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = value;
}

// float Y = 2;
inline void Position::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:mmo.pb.Position.Y)
  return _internal_y();
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mmo.pb.Position.Y)
}
inline float Position::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Position::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = value;
}

// float Z = 3;
inline void Position::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:mmo.pb.Position.Z)
  return _internal_z();
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mmo.pb.Position.Z)
}
inline float Position::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Position::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = value;
}

// float V = 4;
inline void Position::clear_v() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.v_ = 0;
}
inline float Position::v() const {
  // @@protoc_insertion_point(field_get:mmo.pb.Position.V)
  return _internal_v();
}
inline void Position::set_v(float value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:mmo.pb.Position.V)
}
inline float Position::_internal_v() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_;
}
inline void Position::_internal_set_v(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.v_ = value;
}

// -------------------------------------------------------------------

// BroadCast

// int32 Pid = 1;
inline void BroadCast::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0;
}
inline ::int32_t BroadCast::pid() const {
  // @@protoc_insertion_point(field_get:mmo.pb.BroadCast.Pid)
  return _internal_pid();
}
inline void BroadCast::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:mmo.pb.BroadCast.Pid)
}
inline ::int32_t BroadCast::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void BroadCast::_internal_set_pid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = value;
}

// int32 Tp = 2;
inline void BroadCast::clear_tp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tp_ = 0;
}
inline ::int32_t BroadCast::tp() const {
  // @@protoc_insertion_point(field_get:mmo.pb.BroadCast.Tp)
  return _internal_tp();
}
inline void BroadCast::set_tp(::int32_t value) {
  _internal_set_tp(value);
  // @@protoc_insertion_point(field_set:mmo.pb.BroadCast.Tp)
}
inline ::int32_t BroadCast::_internal_tp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tp_;
}
inline void BroadCast::_internal_set_tp(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tp_ = value;
}

// string Content = 3;
inline bool BroadCast::has_content() const {
  return Data_case() == kContent;
}
inline void BroadCast::set_has_content() {
  _impl_._oneof_case_[0] = kContent;
}
inline void BroadCast::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Data_case() == kContent) {
    _impl_.Data_.content_.Destroy();
    clear_has_Data();
  }
}
inline const std::string& BroadCast::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmo.pb.BroadCast.Content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadCast::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Data_case() != kContent) {
    clear_Data();

    set_has_content();
    _impl_.Data_.content_.InitDefault();
  }
  _impl_.Data_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmo.pb.BroadCast.Content)
}
inline std::string* BroadCast::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:mmo.pb.BroadCast.Content)
  return _s;
}
inline const std::string& BroadCast::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (Data_case() != kContent) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.Data_.content_.Get();
}
inline void BroadCast::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Data_case() != kContent) {
    clear_Data();

    set_has_content();
    _impl_.Data_.content_.InitDefault();
  }
  _impl_.Data_.content_.Set(value, GetArena());
}
inline std::string* BroadCast::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Data_case() != kContent) {
    clear_Data();

    set_has_content();
    _impl_.Data_.content_.InitDefault();
  }
  return _impl_.Data_.content_.Mutable( GetArena());
}
inline std::string* BroadCast::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmo.pb.BroadCast.Content)
  if (Data_case() != kContent) {
    return nullptr;
  }
  clear_has_Data();
  return _impl_.Data_.content_.Release();
}
inline void BroadCast::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_Data()) {
    clear_Data();
  }
  if (value != nullptr) {
    set_has_content();
    _impl_.Data_.content_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mmo.pb.BroadCast.Content)
}

// .mmo.pb.Position P = 4;
inline bool BroadCast::has_p() const {
  return Data_case() == kP;
}
inline bool BroadCast::_internal_has_p() const {
  return Data_case() == kP;
}
inline void BroadCast::set_has_p() {
  _impl_._oneof_case_[0] = kP;
}
inline void BroadCast::clear_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Data_case() == kP) {
    if (GetArena() == nullptr) {
      delete _impl_.Data_.p_;
    }
    clear_has_Data();
  }
}
inline ::mmo::pb::Position* BroadCast::release_p() {
  // @@protoc_insertion_point(field_release:mmo.pb.BroadCast.P)
  if (Data_case() == kP) {
    clear_has_Data();
    auto* temp = _impl_.Data_.p_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Data_.p_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mmo::pb::Position& BroadCast::_internal_p() const {
  return Data_case() == kP ? *_impl_.Data_.p_ : reinterpret_cast<::mmo::pb::Position&>(::mmo::pb::_Position_default_instance_);
}
inline const ::mmo::pb::Position& BroadCast::p() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmo.pb.BroadCast.P)
  return _internal_p();
}
inline ::mmo::pb::Position* BroadCast::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mmo.pb.BroadCast.P)
  if (Data_case() == kP) {
    clear_has_Data();
    auto* temp = _impl_.Data_.p_;
    _impl_.Data_.p_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BroadCast::unsafe_arena_set_allocated_p(::mmo::pb::Position* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_Data();
  if (value) {
    set_has_p();
    _impl_.Data_.p_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmo.pb.BroadCast.P)
}
inline ::mmo::pb::Position* BroadCast::_internal_mutable_p() {
  if (Data_case() != kP) {
    clear_Data();
    set_has_p();
    _impl_.Data_.p_ =
        ::google::protobuf::Message::DefaultConstruct<::mmo::pb::Position>(GetArena());
  }
  return _impl_.Data_.p_;
}
inline ::mmo::pb::Position* BroadCast::mutable_p() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmo::pb::Position* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:mmo.pb.BroadCast.P)
  return _msg;
}

// int32 ActionData = 5;
inline bool BroadCast::has_actiondata() const {
  return Data_case() == kActionData;
}
inline void BroadCast::set_has_actiondata() {
  _impl_._oneof_case_[0] = kActionData;
}
inline void BroadCast::clear_actiondata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (Data_case() == kActionData) {
    _impl_.Data_.actiondata_ = 0;
    clear_has_Data();
  }
}
inline ::int32_t BroadCast::actiondata() const {
  // @@protoc_insertion_point(field_get:mmo.pb.BroadCast.ActionData)
  return _internal_actiondata();
}
inline void BroadCast::set_actiondata(::int32_t value) {
  _internal_set_actiondata(value);
  // @@protoc_insertion_point(field_set:mmo.pb.BroadCast.ActionData)
}
inline ::int32_t BroadCast::_internal_actiondata() const {
  if (Data_case() == kActionData) {
    return _impl_.Data_.actiondata_;
  }
  return 0;
}
inline void BroadCast::_internal_set_actiondata(::int32_t value) {
  if (Data_case() != kActionData) {
    clear_Data();
    set_has_actiondata();
  }
  _impl_.Data_.actiondata_ = value;
}

inline bool BroadCast::has_Data() const {
  return Data_case() != DATA_NOT_SET;
}
inline void BroadCast::clear_has_Data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline BroadCast::DataCase BroadCast::Data_case() const {
  return BroadCast::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Player

// int32 Pid = 1;
inline void Player::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0;
}
inline ::int32_t Player::pid() const {
  // @@protoc_insertion_point(field_get:mmo.pb.Player.Pid)
  return _internal_pid();
}
inline void Player::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:mmo.pb.Player.Pid)
}
inline ::int32_t Player::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void Player::_internal_set_pid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = value;
}

// .mmo.pb.Position P = 2;
inline bool Player::has_p() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.p_ != nullptr);
  return value;
}
inline void Player::clear_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.p_ != nullptr) _impl_.p_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mmo::pb::Position& Player::_internal_p() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmo::pb::Position* p = _impl_.p_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmo::pb::Position&>(::mmo::pb::_Position_default_instance_);
}
inline const ::mmo::pb::Position& Player::p() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmo.pb.Player.P)
  return _internal_p();
}
inline void Player::unsafe_arena_set_allocated_p(::mmo::pb::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.p_);
  }
  _impl_.p_ = reinterpret_cast<::mmo::pb::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmo.pb.Player.P)
}
inline ::mmo::pb::Position* Player::release_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmo::pb::Position* released = _impl_.p_;
  _impl_.p_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmo::pb::Position* Player::unsafe_arena_release_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmo.pb.Player.P)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmo::pb::Position* temp = _impl_.p_;
  _impl_.p_ = nullptr;
  return temp;
}
inline ::mmo::pb::Position* Player::_internal_mutable_p() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.p_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mmo::pb::Position>(GetArena());
    _impl_.p_ = reinterpret_cast<::mmo::pb::Position*>(p);
  }
  return _impl_.p_;
}
inline ::mmo::pb::Position* Player::mutable_p() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mmo::pb::Position* _msg = _internal_mutable_p();
  // @@protoc_insertion_point(field_mutable:mmo.pb.Player.P)
  return _msg;
}
inline void Player::set_allocated_p(::mmo::pb::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.p_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.p_ = reinterpret_cast<::mmo::pb::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmo.pb.Player.P)
}

// -------------------------------------------------------------------

// SyncPlayers

// repeated .mmo.pb.Player ps = 1;
inline int SyncPlayers::_internal_ps_size() const {
  return _internal_ps().size();
}
inline int SyncPlayers::ps_size() const {
  return _internal_ps_size();
}
inline void SyncPlayers::clear_ps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ps_.Clear();
}
inline ::mmo::pb::Player* SyncPlayers::mutable_ps(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mmo.pb.SyncPlayers.ps)
  return _internal_mutable_ps()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mmo::pb::Player>* SyncPlayers::mutable_ps()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mmo.pb.SyncPlayers.ps)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ps();
}
inline const ::mmo::pb::Player& SyncPlayers::ps(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmo.pb.SyncPlayers.ps)
  return _internal_ps().Get(index);
}
inline ::mmo::pb::Player* SyncPlayers::add_ps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::mmo::pb::Player* _add = _internal_mutable_ps()->Add();
  // @@protoc_insertion_point(field_add:mmo.pb.SyncPlayers.ps)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mmo::pb::Player>& SyncPlayers::ps() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mmo.pb.SyncPlayers.ps)
  return _internal_ps();
}
inline const ::google::protobuf::RepeatedPtrField<::mmo::pb::Player>&
SyncPlayers::_internal_ps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ps_;
}
inline ::google::protobuf::RepeatedPtrField<::mmo::pb::Player>*
SyncPlayers::_internal_mutable_ps() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ps_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace mmo


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_msg_2eproto_2epb_2eh
